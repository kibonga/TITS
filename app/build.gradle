/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
  id 'jacoco'
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Use JUnit Jupiter for testing.
//  testImplementation libs.junit.jupiter
  testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // Main dependencies
//  implementation libs.guava
  implementation 'com.google.guava:guava:32.1.3-jre'
  implementation "com.fasterxml.jackson.core:jackson-databind:2.18.3"
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.0'
  implementation "org.yaml:snakeyaml:2.2"

  // Lombok
  compileOnly "org.projectlombok:lombok:1.18.36"
  annotationProcessor "org.projectlombok:lombok:1.18.36"
  testCompileOnly "org.projectlombok:lombok:1.18.36"
  testAnnotationProcessor "org.projectlombok:lombok:1.18.36"

  // Logging
  implementation "org.slf4j:slf4j-api:2.0.16"
  implementation "ch.qos.logback:logback-classic:1.5.18"

  // Environment variables
  implementation "io.github.cdimascio:java-dotenv:5.2.2"

  // Mockito
  testImplementation "org.mockito:mockito-core:5.17.0"
  testImplementation "org.mockito:mockito-junit-jupiter:5.17.0"
  testImplementation 'net.bytebuddy:byte-buddy-agent:1.14.11'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport

  jvmArgs = [
    "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains("byte-buddy-agent") }.absolutePath}",
    "--add-opens=java.base/java.util.zip=ALL-UNNAMED"
  ]

  systemProperty "file.encoding", "utf-8"
}

jacoco {
  toolVersion = "0.8.11"
}

tasks.jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.8
      }
    }
  }
}

tasks.jacocoTestReport {
  dependsOn test
  finalizedBy jacocoTestCoverageVerification
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it,
        exclude: [
          "org/example/Environment.class",
          "org/example/CloneRepositoryException.class",
          "org/example/PipelineStepException.class",
          "org/example/PipelineRunnerException.class",
          "org/example/ThreadUtils.class",
          "org/example/FileSystemImpl.class",
          "org/example/BuildResponseFactory.class",
          "org/example/CommandRunner.class",
          "org/example/GithubBuildStatusService.class",
          "org/example/HttpExchangeResponseContext.class",
          "org/example/ThreadExecutor.class",
          "org/example/DefaultConnectionFactory.class",
          "org/example/YamlPipelineConfigProvider.class",
          "org/example/App.class"
        ]
      )
    })
  }
  reports {
    html.required = true
  }
}

application {
  // Define the main class for the application.
  mainClass = 'org.example.App'
}

check.dependsOn jacocoTestCoverageVerification

jar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  manifest {
    attributes(
      'Main-Class': application.mainClass.get()
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)}
  }
}
